Visual Studio 2017 - library and zint.exe
-----------------------------------------

To build the zint library DLL and the command line tool "zint.exe" with PNG support:

Install git (https://git-scm.com/downloads)
Install cmake (https://cmake.org/download/)

Open a "Developer Command Prompt for VS 2017" (should be available under the
"Visual Studio 2017" tab in the Start menu).

Make sure git and cmake are in your PATH, e.g. (your paths may differ)

  set PATH="C:\Program Files\Git\cmd";%PATH%
  set PATH="C:\Program Files\CMake\bin";%PATH%

Download zint, zlib and libpng by going to the directory you want to clone them
into:

  cd <project-directory>

and cloning each:

  git clone https://git.code.sf.net/p/zint/code zint
  git clone https://git.code.sf.net/p/libpng/code lpng
  git clone https://github.com/madler/zlib.git zlib

First build zlib:

  cd zlib

  nmake -f win32\Makefile.msc LOC="-DASMV -DASMINF=" OBJA="inffas32.obj match686.obj"

  cd ..

and then lpng:

  cd lpng

  cmake -G"Visual Studio 15 2017"^
        -DCMAKE_BUILD_TYPE=Release^
        -DPNG_BUILD_ZLIB=ON^
        -DZLIB_INCLUDE_DIRS=..\zlib^
        -DPNG_STATIC=ON^
        -DPNG_SHARED=OFF^
        -H.^
        -Bbuild

  cmake --build build --config Release

  cd ..

If you now open "<project-directory>\zint\win32\zint.sln" with Visual Studio
2017, you should be able to build both the Release and Debug configurations.


Visual Studio 2017 - qtZint.exe
-------------------------------

TODO


Visual Studio 2015
------------------

The solution and project files for Visual Studio 2015 have been moved to the
sub-directory vs2015 and are no longer maintained. However by copying the steps
above and adapting the settings from the Visual Studio 2017 project files (and
adding any sources missing), they should be pretty serviceable.


Visual C++ 6
------------

See "win32\zint_cmdline_vc6\readme.txt"


MSYS/MINGW
----------

TODO
